// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: seeder.proto

package v1

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_seeder_proto struct{}

func (drpcEncoding_File_seeder_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_seeder_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_seeder_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_seeder_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_seeder_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCSeederClient interface {
	DRPCConn() drpc.Conn

	ReadAt(ctx context.Context, in *ReadAtArgs) (*ReadAtReply, error)
	Size(ctx context.Context, in *SizeArgs) (*SizeReply, error)
	Track(ctx context.Context, in *TrackArgs) (*TrackReply, error)
	Sync(ctx context.Context, in *SyncArgs) (*SyncReply, error)
	Close(ctx context.Context, in *CloseArgs) (*CloseReply, error)
}

type drpcSeederClient struct {
	cc drpc.Conn
}

func NewDRPCSeederClient(cc drpc.Conn) DRPCSeederClient {
	return &drpcSeederClient{cc}
}

func (c *drpcSeederClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcSeederClient) ReadAt(ctx context.Context, in *ReadAtArgs) (*ReadAtReply, error) {
	out := new(ReadAtReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.v1.Seeder/ReadAt", drpcEncoding_File_seeder_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSeederClient) Size(ctx context.Context, in *SizeArgs) (*SizeReply, error) {
	out := new(SizeReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.v1.Seeder/Size", drpcEncoding_File_seeder_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSeederClient) Track(ctx context.Context, in *TrackArgs) (*TrackReply, error) {
	out := new(TrackReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.v1.Seeder/Track", drpcEncoding_File_seeder_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSeederClient) Sync(ctx context.Context, in *SyncArgs) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.v1.Seeder/Sync", drpcEncoding_File_seeder_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSeederClient) Close(ctx context.Context, in *CloseArgs) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.v1.Seeder/Close", drpcEncoding_File_seeder_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCSeederServer interface {
	ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error)
	Size(context.Context, *SizeArgs) (*SizeReply, error)
	Track(context.Context, *TrackArgs) (*TrackReply, error)
	Sync(context.Context, *SyncArgs) (*SyncReply, error)
	Close(context.Context, *CloseArgs) (*CloseReply, error)
}

type DRPCSeederUnimplementedServer struct{}

func (s *DRPCSeederUnimplementedServer) ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSeederUnimplementedServer) Size(context.Context, *SizeArgs) (*SizeReply, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSeederUnimplementedServer) Track(context.Context, *TrackArgs) (*TrackReply, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSeederUnimplementedServer) Sync(context.Context, *SyncArgs) (*SyncReply, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSeederUnimplementedServer) Close(context.Context, *CloseArgs) (*CloseReply, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCSeederDescription struct{}

func (DRPCSeederDescription) NumMethods() int { return 5 }

func (DRPCSeederDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/com.pojtinger.felicitas.r3map.v1.Seeder/ReadAt", drpcEncoding_File_seeder_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSeederServer).
					ReadAt(
						ctx,
						in1.(*ReadAtArgs),
					)
			}, DRPCSeederServer.ReadAt, true
	case 1:
		return "/com.pojtinger.felicitas.r3map.v1.Seeder/Size", drpcEncoding_File_seeder_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSeederServer).
					Size(
						ctx,
						in1.(*SizeArgs),
					)
			}, DRPCSeederServer.Size, true
	case 2:
		return "/com.pojtinger.felicitas.r3map.v1.Seeder/Track", drpcEncoding_File_seeder_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSeederServer).
					Track(
						ctx,
						in1.(*TrackArgs),
					)
			}, DRPCSeederServer.Track, true
	case 3:
		return "/com.pojtinger.felicitas.r3map.v1.Seeder/Sync", drpcEncoding_File_seeder_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSeederServer).
					Sync(
						ctx,
						in1.(*SyncArgs),
					)
			}, DRPCSeederServer.Sync, true
	case 4:
		return "/com.pojtinger.felicitas.r3map.v1.Seeder/Close", drpcEncoding_File_seeder_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSeederServer).
					Close(
						ctx,
						in1.(*CloseArgs),
					)
			}, DRPCSeederServer.Close, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterSeeder(mux drpc.Mux, impl DRPCSeederServer) error {
	return mux.Register(impl, DRPCSeederDescription{})
}

type DRPCSeeder_ReadAtStream interface {
	drpc.Stream
	SendAndClose(*ReadAtReply) error
}

type drpcSeeder_ReadAtStream struct {
	drpc.Stream
}

func (x *drpcSeeder_ReadAtStream) SendAndClose(m *ReadAtReply) error {
	if err := x.MsgSend(m, drpcEncoding_File_seeder_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSeeder_SizeStream interface {
	drpc.Stream
	SendAndClose(*SizeReply) error
}

type drpcSeeder_SizeStream struct {
	drpc.Stream
}

func (x *drpcSeeder_SizeStream) SendAndClose(m *SizeReply) error {
	if err := x.MsgSend(m, drpcEncoding_File_seeder_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSeeder_TrackStream interface {
	drpc.Stream
	SendAndClose(*TrackReply) error
}

type drpcSeeder_TrackStream struct {
	drpc.Stream
}

func (x *drpcSeeder_TrackStream) SendAndClose(m *TrackReply) error {
	if err := x.MsgSend(m, drpcEncoding_File_seeder_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSeeder_SyncStream interface {
	drpc.Stream
	SendAndClose(*SyncReply) error
}

type drpcSeeder_SyncStream struct {
	drpc.Stream
}

func (x *drpcSeeder_SyncStream) SendAndClose(m *SyncReply) error {
	if err := x.MsgSend(m, drpcEncoding_File_seeder_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSeeder_CloseStream interface {
	drpc.Stream
	SendAndClose(*CloseReply) error
}

type drpcSeeder_CloseStream struct {
	drpc.Stream
}

func (x *drpcSeeder_CloseStream) SendAndClose(m *CloseReply) error {
	if err := x.MsgSend(m, drpcEncoding_File_seeder_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
